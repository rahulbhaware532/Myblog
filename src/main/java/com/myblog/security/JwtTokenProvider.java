package com.myblog.security;

import com.myblog.exception.BlogAPIException;
import io.jsonwebtoken.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JwtTokenProvider {

/**
 JWT Token- Jwt tokens are used for user authentication and autherization
 after a user logsin the server generates JWT token that will consist of 3 parts
 1.header - header consist of algoritham use to generate the token and the type of the token details.
 2.payload- the payload is consists of the user details such as what is the role of the user
 3.signature- It is  generated by applying the secretkey so that decription of token will happend by the backend only when  this secretkey is applied .

 The second time or the subsequent request the user wants to interact with the server the user has to make
 http request with the token.
 This http request will now be given to JwtAuthenticationFilter class  in which we  firstly extract the token from the url using doFilterInternal method.

 After extracting the token we validate the token ,If the token is valid we set the security context so that appropriate response is given to the user.

 Note- JwtTokenProvider class generate the token first time when the user logs in
 JwtAuthenticationFilter class  validates the token for the subsequent http request made using doFilter method.

 secretKey is applied to generate the token which is given in properties file.

 We can aslo set expiry of the token.
 Tokens performs stateless communication with the server.
*/

    @Value("app.jwt-secret")
    private String jwtSecret;

//    @Value("app.jwt-expiration-milliseconds")
     final long  jwtExpirationInMs = 604800000;


    //Generte token
    public String generateToken(Authentication authentication){

        String username = authentication.getName();
        Date currentDate= new Date();
        Date expireDate = new Date(currentDate.getTime() + jwtExpirationInMs);




        String token = Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(expireDate)
                .signWith(SignatureAlgorithm.HS512,jwtSecret)
                .compact();

        return token;
    }


    //get username from the token
    public String getUsernameFromJwt(String token){

        Claims claims = Jwts.parser()
                .setSigningKey(jwtSecret)
                .parseClaimsJws(token)
                .getBody();

        return claims.getSubject();
    }

    public boolean validateToken(String token) throws BlogAPIException {

       try {
           Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token);
           return true;
       }catch (SignatureException ex){
           throw new BlogAPIException(HttpStatus.BAD_REQUEST,"Invalid JWT signature");
       }
       catch (MalformedJwtException ex){
           throw new BlogAPIException(HttpStatus.BAD_REQUEST,"Invalid JWT token");
       }
       catch (ExpiredJwtException ex){
           throw new BlogAPIException(HttpStatus.BAD_REQUEST,"Expired JWT token");
       }
       catch (UnsupportedJwtException ex){
           throw new BlogAPIException(HttpStatus.BAD_REQUEST,"Unsupported JWT token");
       }
       catch (IllegalArgumentException ex){
           throw new BlogAPIException(HttpStatus.BAD_REQUEST,"JWT clams string is empty");
       }
    }
}


// What is this TokenProvider=> When the security context has a valid user then the generateToken method will run  else program will stop at context itself;